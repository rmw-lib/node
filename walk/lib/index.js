// Generated by CoffeeScript 2.6.1
var walk;

import {
  opendir,
  readlink,
  stat
} from 'fs/promises';

import {
  dirname,
  join,
  normalize
} from "path";

export default walk = async function*(dir) {
  var d, entry, err, i, len, p, ref, results, s;
  ref = (await opendir(dir));
  results = [];
  for await (d of ref) {
    entry = join(dir, d.name);
    if (d.isDirectory()) {
      results.push((yield* walk(entry)));
    } else if (d.isFile()) {
      results.push((yield entry));
    } else if (d.isSymbolicLink()) {
      p = (await readlink(entry));
      if (!p.startsWith('/')) {
        p = normalize(join(dir, p));
      }
      try {
        s = (await stat(p));
      } catch (error) {
        err = error;
        continue;
      }
      if (s.isDirectory()) {
        len = p.length;
        results.push((yield* (async function*() {
          var ref1, results1;
          ref1 = walk(p);
          results1 = [];
          for await (i of ref1) {
            results1.push((yield join(entry, i.slice(len))));
          }
          return results1;
        })()));
      } else if (s.isFile()) {
        results.push((yield entry));
      } else {
        results.push(void 0);
      }
    } else {
      results.push(void 0);
    }
  }
  return results;
};

export var walkRel = async function*(dir) {
  var d, follow_symbol, len, ref, results;
  len = dir.length + 1;
  ref = walk(dir, follow_symbol = true);
  results = [];
  for await (d of ref) {
    results.push((yield d.slice(len)));
  }
  return results;
};
